stages:
  - prepare
  - lint
  - build
  - publish
variables:
  PACKAGENAME: "android" #$PACKAGENAME
  VERSION: "latest" #$VERSION
  GRADLE_OPTS: "-Xmx4096m"
  ANDROID_COMPILE_SDK: "33" #$ANDROID_COMPILE_SDK
  ANDROID_BUILD_TOOLS: "33.0.2" #$ANDROID_BUILD_TOOLS
  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "6514223" #$ANDROID_SDK_TOOLS
# Packages installation before running script
prepare_env:
  image: openjdk:17-jdk
  interruptible: true
  stage: prepare
  when: manual
  tags:
  - main
  before_script:
    - microdnf -y update 
    - microdnf -y install wget tar unzip libstdc++.i686 zlib.i686
    # Setup path as android_home for moving/exporting the downloaded sdk into it
    - export ANDROID_HOME="${PWD}/android-home"
    # Create a new directory at specified location
    - install -d $ANDROID_HOME
    # Here we are installing androidSDK tools from official source,
    # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
    # after that unzipping those tools and
    # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
    - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    # move to the archive at ANDROID_HOME
    - pushd $ANDROID_HOME
    - unzip -d cmdline-tools cmdline-tools.zip
    - popd
    - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/tools/bin/
    # checking sdkManager version
    #- sdkmanager --version
    # use yes to accept all licenses
    - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
    - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
    - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
    - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"
    - chmod +x ./gradlew
  script:
    - echo "Preparing environment"
  artifacts:
    paths:
      - ./gradlew
lint:
  stage: lint
  when: manual
  tags:
  - main
  image: openjdk:17-jdk  # Use the appropriate JDK image
  dependencies:
    - prepare_env
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
  allow_failure: true
build:
  stage: build
  when: manual
  tags:
  - main
  image: openjdk:17-jdk  # Use the appropriate JDK image
  dependencies:
    - prepare_env
  script:
    - ./gradlew assemble
  artifacts:
    paths:
      - app/build/outputs/
upload-to-package-registry:
  image: alpine
  stage: publish
  needs: ['build']
  tags:
  - main
  when: manual
  before_script:
    - apk update && apk add curl
  script: 
     - ls -al
     - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file app/build/outputs/apk/debug/app.apk ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGENAME}/${VERSION}/${PACKAGENAME}-${VERSION}.apk'
